
(deflisten ricon :initial 0 "./scripts/ricon.py")
(defvar revealsearch false)
; (defvar ricon 0)

(defwindow bar 
  :geometry (geometry 
              :x "0%"
              :y "0%"
              :width "100%"
              :height 0
              :anchor "top center")
              
  :stacking "bottom"
  :exclusive true
  :monitor 0
  :wm-ignore false
  (barstruct))

(defwidget barstruct []
  ; (box
  ;   :class "boxborder"
  ;   :style {arraylength(notifications.popups) > 0 ? "animation: gradanim 2s linear infinite; padding: 3px; padding-top: 0px;" : "padding: 0px; padding-top: 0px;"}
    ; :halign "center"
    ; (revealer 
    ;   :reveal {revealbar == 1 && !overview}
    ;   :transition "slidedown"
    (box
      :class "barbg customslide"
      :orientation "h"
      :style "min-height: ${revealbar == 0 || overview ? 0 : revealbar > 1 ? 160 : 40}px"
      :halign "center"
      :space-evenly false
      (scroll
        :vscroll true
        :hscroll false
        :hexpand true
        (box 
          :orientation "h"
          :space-evenly false
          (search)
          (notification)
          (revealer 
            :reveal {(arraylength(notifications.popups) == 0 && !revealsearch) || revealbar > 1}
            :transition "slideright"
            (box
              :orientation "v"
              :space-evenly false
              :width 950
              (stack 
                :selected {revealbar > 1 ? 0 : 1}
                :transition "slideright"
                (dashboard)
                (centerbox 
                  :valign "start"
                  :width 950
                  (left)
                  (middle)
                  (right)))))))))

(defwidget left [] 
  (box 
    :orientation "h"
    :space-evenly false
    :halign "start"
    (workspace)
    (spos)
    (keepopen)))

(defwidget middle [] 
  (box 
    :orientation "h"
    :space-evenly false
    :halign "center"
    (box
      :orientation "v"
      :space-evenly false
      (osd)
      (switcher))
    (box 
      :width 40)))

(defwidget right [] 
  (box 
    :orientation "h"
    :halign "end"
    :space-evenly false
    ; (stray)
    (battery)
    (clock)))

(defwidget keepopen [] 
  (label 
    :visible false 
    :text "${pcover} ${playerctl} ${notifications}"))
