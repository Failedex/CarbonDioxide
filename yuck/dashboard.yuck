(defwidget dashboard [] 
  (scroll
    :class "cubictransition"
    :style "min-width: ${revealbar == 2 ? 160 : 40}px;"
    :vscroll true
    :hscroll false
    (box 
      :height 160
      :orientation "h"
      :space-evenly false 
      (mediadiscside)
      (switchablelog)
      (sideswitchslide)
      (calwidget))))

(defvar selectedlog 3)
(defvar lognames '["wifi", "bluetooth", "notifications"]')

(defwidget sideswitch [] 
  (box 
    :orientation "v"
    :space-evenly false
    (sideswitchbutton 
      :icon "./assets/icons/wifi.svg"
      :onclick "./scripts/network.sh --update_eww_json"
      :index 0)
    (sideswitchbutton 
      :icon "./assets/icons/bluetooth.svg"
      :onclick "./scripts/bluetooth.sh --update_eww_json"
      :index 1)
    (sideswitchbutton 
      :icon "./assets/icons/bell.svg"
      :index 2)
    (sideswitchbutton 
      :icon "./assets/icons/file-text.svg"
      :index 3)))

(defwidget sideswitchbutton [icon index ?onclick]
  (button 
    :class "widget cubictransition"
    :style "min-width: 30px; min-height: ${ selectedlog == index ? 30 : 16 }px;"
    :onclick "${EWW_CMD} update selectedlog=${index} ${onclick != '' ? '&&' + onclick : ''}"
    (scroll
      :active false
      (image 
        :style "opacity: ${selectedlog == index ? 1 : 0};"
        :image-width 25
        :path icon)))) 

(defvar updatedashval "
  ./scripts/bluetooth.sh --update_eww_json &
  ./scripts/network.sh --update_eww_json &")

(defwidget sideswitchslide []
  (eventbox
    :cursor "all-scroll"
    :onscroll "./scripts/switcher.sh {} 4 selectedlog & ${updatedashval}"
    :onclick "./scripts/switcher.sh up 4 selectedlog & ${updatedashval}"
    :onrightclick "./scripts/switcher.sh down 4 selectedlog & ${updatedashval}"
    :vexpand true
    :width 30
    (box 
      :class "fakeslide"
      :vexpand true
      (box 
        :class "scaleborder"
        (box 
          :class "knob"
          :style "
        margin-top: ${32 * selectedlog}px;
        margin-bottom: ${32 * (3 - selectedlog)}px;
        ")))))
    

(defwidget switchablelog [] 
  (box 
    :class "switchablelog"
    :width 402
    :orientation "h"
    :space-evenly false
    (box 
      :orientation "v"
      :space-evenly false
      :class "side"
      (stack
        :selected selectedlog
        (image
          :style "margin-top: 5px;"
          :path "./assets/icons/wifi.svg"
          :image-width 25)
        (image
          :style "margin-top: 5px;"
          :path "./assets/icons/bluetooth.svg"
          :image-width 25)
        (image
          :style "margin-top: 5px;"
          :path "./assets/icons/bell.svg"
          :image-width 25)
        (image
          :style "margin-top: 5px;"
          :path "./assets/icons/file-text.svg"
          :image-width 25))
      (box 
        :vexpand true)
      (stack
        :selected {selectedlog == 2 ? 0 : selectedlog == 3 ? 2 : 1}
        :transition "slidedown"
        (logswitch
          ;; stupid parinfer moment
          :cond {!notifications.dnd} 
          :toggle {
                    selectedlog == 2 ? 
                    "./scripts/notifmanage.sh --toggle" : 
                    ''})
        (eventbox 
          :cursor "pointer"
          :onclick {
                    selectedlog == 1 ? 
                    './scripts/bluetooth.sh --update_eww_json' :
                    './scripts/network.sh --update_eww_json'}
          (box
            :style "margin: 5px;"
            (image 
              :image-width 22
              :path "./assets/icons/refresh-cw.svg")))

        (eventbox 
          :cursor "pointer"
          :onclick "foot nvim ~/Documents/fuck.txt &"
          (box
            :style "margin: 5px;"
            (image 
              :image-width 22
              :path "./assets/icons/edit.svg")))))
          
    (box 
      :hexpand true
      :class "inner"
      (stack 
        :selected selectedlog
        :transition "slidedown"
        (wifilist)
        (bluetoothlist)
        (notiflog)
        (whiteboard)))))

(defwidget logswitch [cond toggle]
  (eventbox
    :cursor "pointer"
    :onclick toggle
    (box 
      :class "toggleswitch"
      (box 
        :class "knob ${cond ? 'on' : 'off'}"))))
